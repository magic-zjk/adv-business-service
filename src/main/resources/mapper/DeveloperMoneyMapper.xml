<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.imopan.adv.platform.mapper.DeveloperMoneyMapper">
	<resultMap id="BaseResultMap" type="com.imopan.adv.platform.entity.DeveloperMoney">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		<id column="ID" property="id" jdbcType="INTEGER" />
		<result column="TOTAL_MONEY" property="totalMoney" jdbcType="DECIMAL" />
		<result column="FREEZE_MONEY" property="freezeMoney" jdbcType="DECIMAL" />
		<result column="BALANCE" property="balance" jdbcType="DECIMAL" />
		<result column="USER_ID" property="userId" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		ID, TOTAL_MONEY, FREEZE_MONEY, BALANCE, USER_ID
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.imopan.adv.platform.entity.DeveloperMoneyExample">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		select
		<if test="distinct">
			distinct
		</if>
		'false' as QUERYID,
		<include refid="Base_Column_List" />
		from developer_money
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
		<if test="limitStart != null and limitStart>=0">
			limit #{limitStart} , #{limitEnd}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		select
		<include refid="Base_Column_List" />
		from developer_money
		where ID = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		delete from developer_money
		where ID = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.imopan.adv.platform.entity.DeveloperMoney">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		insert into developer_money (ID, TOTAL_MONEY, FREEZE_MONEY,
		BALANCE, USER_ID)
		values (#{id,jdbcType=INTEGER}, #{totalMoney,jdbcType=DECIMAL},
		#{freezeMoney,jdbcType=DECIMAL},
		#{balance,jdbcType=DECIMAL}, #{userId,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="com.imopan.adv.platform.entity.DeveloperMoney">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		insert into developer_money
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				ID,
			</if>
			<if test="totalMoney != null">
				TOTAL_MONEY,
			</if>
			<if test="freezeMoney != null">
				FREEZE_MONEY,
			</if>
			<if test="balance != null">
				BALANCE,
			</if>
			<if test="userId != null">
				USER_ID,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="totalMoney != null">
				#{totalMoney,jdbcType=DECIMAL},
			</if>
			<if test="freezeMoney != null">
				#{freezeMoney,jdbcType=DECIMAL},
			</if>
			<if test="balance != null">
				#{balance,jdbcType=DECIMAL},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample"
		parameterType="com.imopan.adv.platform.entity.DeveloperMoneyExample"
		resultType="java.lang.Integer">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		select count(*) from developer_money
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByPrimaryKeySelective" parameterType="com.imopan.adv.platform.entity.DeveloperMoney">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		update developer_money
		<set>
			<if test="totalMoney != null">
				TOTAL_MONEY = #{totalMoney,jdbcType=DECIMAL},
			</if>
			<if test="freezeMoney != null">
				FREEZE_MONEY = #{freezeMoney,jdbcType=DECIMAL},
			</if>
			<if test="balance != null">
				BALANCE = #{balance,jdbcType=DECIMAL},
			</if>
			<if test="userId != null">
				USER_ID = #{userId,jdbcType=INTEGER},
			</if>
		</set>
		where ID = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.imopan.adv.platform.entity.DeveloperMoney">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. -->
		update developer_money
		set TOTAL_MONEY = #{totalMoney,jdbcType=DECIMAL},
		FREEZE_MONEY = #{freezeMoney,jdbcType=DECIMAL},
		BALANCE = #{balance,jdbcType=DECIMAL},
		USER_ID = #{userId,jdbcType=INTEGER}
		where ID = #{id,jdbcType=INTEGER}
	</update>
</mapper>